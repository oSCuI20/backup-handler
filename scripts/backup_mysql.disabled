#!/bin/bash
#
# Eduardo Banderas Alba
# $1=SSH_HOST
#
# path backups if execute as server: ARCHIVEROOT/SSH_HOST/mysql
#                                    ARCHIVEROOT/SSH_HOST/mysql/YYYYMMDD/db1.sql.gz
#                                    ARCHIVEROOT/SSH_HOST/mysql/YYYYMMDD/db2.sql.gz
#
# path backups if execute as client: ARCHIVEROOT/hostname/mysql
#                                    ARCHIVEROOT/hostname/mysql/YYYYMMDD/db1.sql.gz
#                                    ARCHIVEROOT/hostname/mysql/YYYYMMDD/db2.sql.gz

. ${_CONFIGDIR}/manager-functions


main_backup() {
  /bin/echo ""
  checking_global_vars
  now=$(/bin/date +%Y%m%d)

  ${SERVER} && HOSTNAME="${host}" || HOSTNAME="$(/bin/hostname -f)"

  backup_dir="${ARCHIVEROOT}/${HOSTNAME}/mysql"
  sshauth="--host=$host --user=$SSH_USER --port=$SSH_PORT --keyfile=$SSH_KEY"

  printf "Starting MySQL backup, ${HOSTNAME} at `/bin/date`\n"

  db_ignore=${MYSQL_IGNORE}
  m_options="-h $MYSQL_HOST -u $MYSQL_USER -p$MYSQL_PASS -P ${MYSQL_PORT}"
  d_options="${m_options} --single-transaction --triggers --routines"
  g_options="--best --force --quiet"
  storage="${backup_dir}/${now}"

  ${SERVER} && main_backup_server || main_backup_client

  printf "Finish MySQL backup, ${HOSTNAME} at `/bin/date`\n"
  exit ${retval}
}  #main_backup


main_backup_server() {
  /bin/mkdir -p ${storage}

  dbs=$(_ssh_exec ${sshauth} \
                        --cmd="/usr/bin/mysql ${m_options} -e 'SHOW DATABASES'")
  retval=$?

  if [ ${retval} -eq 0 ]; then
    dbs=$(printf "${dbs}" | /bin/grep -E -v "${db_ignore}" | \
          /bin/grep -v "Warning: Using a password on the command line ")

    for db in ${dbs}; do
      _ssh_exec ${sshauth} \
               --cmd="/usr/bin/mysqldump ${d_options} --databases ${db}" | \
                      /bin/gzip ${g_options} > ${storage}/${db}.sql.gz
      retval=$?

      if [ ${retval} -eq 0 ]; then
        printf "Backup database ${db}\n"
      else
        printf "Error in database ${db}\n"
      fi
    done  #for db in ${dbs}
    out=$(/usr/bin/find ${backup_dir} -maxdepth 1 -type d -mtime +${DAYS} \
                                      -exec /bin/rm -vRf {} \;)

    if [ "${out}" != "" ]; then
      printf "Remove backups higher than ${DAYS}\n${out}\n"
    fi
  else
    printf "Error: Cannot execute mysql\n${dbs}\n"
  fi
}  #main_backup_server


main_backup_client() {
  _ssh_exec ${sshauth} --cmd="/bin/mkdir -p ${storage}"
  tmp_dir="${TEMPDIR}/${now}"

  dbs=$(/usr/bin/mysql ${m_options} -e 'SHOW DATABASES')
  retval=$?

  if [ ${retval} -eq 0 ]; then
    dbs=$(printf "${dbs}" | /bin/grep -E -v "${db_ignore}" | \
          /bin/grep -v "Warning: Using a password on the command line ")

    for db in ${dbs}; do
      /usr/bin/mysqldump ${d_options} --databases ${db} | \
                      /bin/gzip ${g_options} > ${tmp_dir}/${db}.sql.gz
      retval=$?

      if [ ${retval} -eq 0 ]; then
        printf "Backup database ${db}\n"
      else
        printf "Error in database ${db}\n"
      fi

      /usr/bin/scp -P ${SSH_PORT} -i ${SSH_KEY} ${tmp_dir}/${db}.sql.gz \
                      ${SSH_USER}@${host}:${backup_dir}/.
    done  #for db in ${dbs}
    out=$(_ssh_exec ${sshauth} \
                    --cmd="/usr/bin/find ${backup_dir} -maxdepth 1 -type d \
                          -mtime +${DAYS} -exec /bin/rm -vRf {} \;")

    if [ "${out}" != "" ]; then
      printf "Remove backups higher than ${DAYS}\n${out}\n"
    fi
  else
    printf "Error: Cannot execute mysql\n${dbs}\n"
  fi
}  #main_backup_client


checking_global_vars() {
  if [ -z "${SSH_HOST}" ] || [ "${SSH_HOST}" == "" ]; then
    printf "SSH_HOST not defined\n"
    exit 1
  fi

  if [ -z "${SSH_USER}" ] || [ "${SSH_USER}" == "" ]; then
    printf "SSH_USER not defined\n"
    exit 1
  fi

  if [ -z "${SSH_PORT}" ] || [ "${SSH_PORT}" == "" ] || \
     [[ ! "${SSH_PORT}" =~ [0-9]+ ]]; then
    printf "SSH_PORT not defined or value is not numeric\n"
    exit 1
  fi

  if [ -z "${SSH_KEY}" ] || [ "${SSH_KEY}" == "" ] || \
     [ ! -f "${SSH_KEY}" ]; then
    printf "SSH_KEY not defined or file not exists\n"
    exit 1
  fi

  if [ -z "${SSH_USER}" ] || [ "${SSH_USER}" == "" ]; then
    printf "SSH_USER not defined"
    exit 1
  fi

  if [ -z "${MYSQL_USER}" ] || [ "${MYSQL_USER}" == "" ]; then
    printf "MYSQL_USER not defined"
    exit 1
  fi

  if [ -z "${MYSQL_PASS}" ] || [ "${MYSQL_PASS}" == "" ]; then
    printf "MYSQL_PASS not defined"
    exit 1
  fi

  if [ -z "${MYSQL_PORT}" ] || [ "${MYSQL_PORT}" == "" ] || \
     [[ ! "${MYSQL_PORT}" =~ [0-9]+ ]]; then
    printf "MYSQL_PORT not defined or value is not numeric\n"
    exit 1
  fi

  if [ -z "${MYSQL_IGNORE}" ] || [ "${MYSQL_IGNORE}" == "" ]; then
    MYSQL_IGNORE="(information_schema|performance_schema|mysql)"
  fi

  if [ -z "${TEMPDIR}" ] || [ "${TEMPDIR}" == "" ] || \
     [ ! -d "${TEMPDIR}" ]; then
    TEMPDIR=/var/tmp
  fi

  if [ -z "${DAYS}" ] || [ "${DAYS}" == "" ]; then
    DAYS=25
  fi
}  #checking_global_vars


if [ -z "${1}" ]; then
  printf "Not exists arguments for the script. \$1 should a \
ip address of ssh or domain name\n"
  exit 1
fi
host="${1}"

main_backup
